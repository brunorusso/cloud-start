//
// Convert REM to PX. Just because IE8-
//
@function remtopx($size)
  @return ($size * 16) + px

//
// Keyframes
//
=keyframes($animation-name)
  @-webkit-keyframes #{$animation-name}
    @content

  @-moz-keyframes #{$animation-name}
    @content

  @-ms-keyframes #{$animation-name}
    @content

  @keyframes #{$animation-name}
    @content

//
// Animations
//
=animation($str)
  -webkit-animation: #{$str}
  -moz-animation: #{$str}
  -ms-animation: #{$str}
  animation: #{$str}

//
// RGBA in properties
//
=rgba($property, $color, $alpha: 1)
  #{$property}: rgb(red($color), green($color), blue($color))
  @if $alpha < 1
    #{$property}: rgba($color, $alpha )

//
// RGBA in properties
//
=rgba($property, $color, $alpha)
  #{$property}: $color
  #{$property}: rgba($color, $alpha )

//
// Adds rounded borders on icons.
//
=border-circle($size, $font-size)
  text-align: center
  font-size: $font-size
  height: $size
  width: $size
  line-height: $size
  border-radius: 100%

// ARROWS
// Creates arrow.
// $arrow-color defines the color of the arrow.
// $arrow-size sets the size of the arrow.
=arrow-structure($arrow-size)
  content: ""
  display: inline-block
  width: 0
  height: 0
  margin-left: 5px
  position: relative
  border: $arrow-size solid transparent

=arrow-up($arrow-color, $arrow-size)
  +arrow-structure($arrow-size)
  border-color: transparent transparent $arrow-color transparent

=arrow-down($arrow-color, $arrow-size)
  +arrow-structure($arrow-size)
  border-color: $arrow-color transparent transparent transparent

=arrow-right($arrow-color, $arrow-size)
  +arrow-structure($arrow-size)
  border-color: transparent transparent transparent $arrow-color

=arrow-left($arrow-color, $arrow-size)
  +arrow-structure($arrow-size)
  border-color: transparent $arrow-color transparent transparent

=button-variation($mix1, $mix2, $mix3:"")
  background: $mix1
  border-color: $mix2
  color: unquote($mix3)

@function map-fetch($map, $keys)
  $key: nth($keys, 1)
  $length: length($keys)
  $value: map-get($map, $key)
  @if ($length > 1)
    $rest: ()
    @for $i from 2 through $length
      $rest: append($rest, nth($keys, $i))
    @return map-fetch($value, $rest)
  @else
    @return $value
